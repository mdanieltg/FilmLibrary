// <auto-generated />
using System;
using FilmLibrary.DataRepository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmLibrary.DataRepository.Migrations
{
    [DbContext(typeof(FilmLibraryDbContext))]
    [Migration("20220630160530_AddAnnotations")]
    partial class AddAnnotations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.Property<Guid>("FilmsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenresId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FilmsId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("FilmGenre");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Film", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryOfOriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Plot")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryOfOriginId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("RatingId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22c977a8-683f-43e5-97ed-e411e9a0568b"),
                            Description = "General audiences – All ages admitted",
                            Name = "G"
                        },
                        new
                        {
                            Id = new Guid("9903c142-6474-432e-97d4-5b66bd6a18c2"),
                            Description = "Parental guidance suggested – Some material may not be suitable for children",
                            Name = "PG"
                        },
                        new
                        {
                            Id = new Guid("9e714ed4-a1a3-4e62-b49d-856b3009d528"),
                            Description = "Parents strongly cautioned – Some material may be inappropriate for children under 13",
                            Name = "PG-13"
                        },
                        new
                        {
                            Id = new Guid("a4a5eb16-c029-4ae6-ae0a-f56bab161d7d"),
                            Description = "Restricted – Under 17 requires accompanying parent or adult guardian",
                            Name = "R"
                        },
                        new
                        {
                            Id = new Guid("bf9c6f50-b7c2-4e2d-97fb-bd318a3977f3"),
                            Description = "Adults only – No one 17 and under admitted",
                            Name = "NC-17"
                        });
                });

            modelBuilder.Entity("FilmGenre", b =>
                {
                    b.HasOne("FilmLibrary.Domain.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmLibrary.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Film", b =>
                {
                    b.HasOne("FilmLibrary.Domain.Entities.Country", "CountryOfOrigin")
                        .WithMany("Films")
                        .HasForeignKey("CountryOfOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmLibrary.Domain.Entities.Director", "Director")
                        .WithMany("Films")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmLibrary.Domain.Entities.Rating", "Rating")
                        .WithMany("Films")
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryOfOrigin");

                    b.Navigation("Director");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Country", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Director", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("FilmLibrary.Domain.Entities.Rating", b =>
                {
                    b.Navigation("Films");
                });
#pragma warning restore 612, 618
        }
    }
}
